Aula 3 ⟹ Visibilidade
public
private
protected

PHP ⏩

<pre>
<?php
require_once "Caneta.php";
$c1 = new Caneta;
$c1->modelo = "BIC cristal";
$c1->cor = "Azul";
//$c1->ponta = 0.5;
//$c1->carga = 99;
//$c1->tampada = true;
//$c1->destampar();
$c1->rabiscar();
print_r($c1);

?>
</pre>
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
<?php
class Caneta {
    public $modelo;
    public $cor;
    private $ponta;
    protected $carga;
    protected $tampada;

    public function rabiscar() {
        if ($this->tampada == true){
        echo "Não posso rabiscar!<br>";
        } else {
        echo "Estou rabiscando!<br>";
        }
}

    private function tampar() {
        $this->tampada = true;
        }

    private function destampar() {
        $this->tampada = false;
    }
}
?>

A tag </pre> modifica o formato
da vizualização.

⚪ Outpost ⚪

Estou rabiscando!
Caneta Object
(
    [modelo] => BIC cristal
    [cor] => Azul
    [ponta:Caneta:private] => 
    [carga:protected] => 
    [tampada:protected] => 
)

Obs: Ao tentar pecher nos atributos private,
e protected, ele não executa.
O mesmo ocorre com as funções.
Logo após foram colocadas as funções tampar()
e destampar() como public.
Mesmo que o atributo $tampada está como
protected a função reconhece como true ou false.
tampada:protected] => 1

Aula 4 ⟹ Metodos
GETTER
SETTER
Construct

PHP ⏩

<pre>
<?php
require_once "Caneta.php";

$c1 = new Caneta();
$c1->setModelo("BIC");
$c1->setPonta(0.5);

echo "Eu tenho uma caneta {$c1->getModelo()} de ponta {$c1->getPonta()}.";
?>
</pre>

Obs: Colocado a chave {} para interpretar as funções adicionadas.

<?php
class Caneta {
    public $modelo;
    private $ponta;

    public function getModelo() {
        return $this->modelo;
}

    public function setModelo($m) {
        $this->modelo = $m;
        }

    public function getPonta() {
        return $this->$ponta;
    }

    public function setPonta($p) {
        $this->ponta = $p;
    }
}
?>

public function __construct() {
    $this->cor = "Azul";
    $this->tampar();
    $this->ponta = 0.5;
    $this->modelo = "BIC cristal";
}

Caneta Object
(
    [modelo:Caneta:private] => BIC cristal
    [cor:Caneta:private] => Azul
    [ponta:Caneta:private] => 0.5
    [tampada:Caneta:private] => 1
)

public function tampar(){
    $this->tampada = true;
}

⚪ Outpost ⚪

Caneta Object
(
    [modelo:Caneta:private] => BIC cristal
    [cor:Caneta:private] => Azul
    [ponta:Caneta:private] => 0.5
    [tampada:Caneta:private] => 1
)

obs: Podemos criar a função construct somente colocando
o nome da classe.

Ex: 
public function Caneta() {
    $this->cor = "Azul";
    $this->tampar();
    $this->ponta = 0.5;
    $this->modelo = "BIC cristal";
}
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula7 
PHP ⏩

Obs: Para criar o SETTER com a função de outro
SETTER dentro, eu tenho que alterar o 
constructor

    public function __construct($no, $na, $id, $al, $pe, 
     $vi, $de, $em){

        $this->nome = $no;
        $this->nacionalidade = $na;
        $this->idade = $id;
        $this->altura = $al;
        $this->setPeso($pe);
        $this->vitorias = $vi;
        $this->derrotas = $de;
        $this->empates = $em;
    }
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Aula8
PHP ⏩

Obs: Pode ser adicionada a função na variável
já criada no seguinte modo abaixo.

    public function lutar(){
        if ($this->aprovada) {
            $this->desafiado->apresentar();
            $this->desafiante->apresentar();
            $vencedor = rand(0,2);
            switch ($vencedor){
                case 0: //empate
                    echo "<p>Empatou!</p>";
                    $this->desafiado->empatarLuta();
                    $this->desafiante->empatarLuta();
                    break;
                case 1: // ganhou desafiado
                    echo "<p>Ganhou" . $this->desafiado->getNome()."</p>";
                    $this->desafiado->ganharLuta();
                    $this->desafiante->perderLuta();
                    break;
                case 2: //ganhou desafiante
                    echo "<p>Ganhou" . $this->desafiante->getNome()."</p>" ;
                    $this->desafiante->ganharLuta();
                    $this->desafiado->perderLuta();
                    break;
            }
        } else {
            echo "<p>Luta não pode acontecer</p>";
        }
    }
